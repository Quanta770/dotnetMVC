.Net Core Roadmap
- 


Fundamentals if ASP .NET
1. Setup MVC project in VS
- Run/Build ASP.net web app project
- Project file
- launchSettings.json -> for running application
	- environmental variable (DEV/PROD) -> profiles
- wwwroot folder -> static content (css/js/nuget/img)
- appsettings.json
	- connection string/secret key/db connection

- Program.cs 
	- Add services to container
	- Configure request pipeline
2. MVC
- Model: Shape of data
- View: user interface (html/css)
	- Partial view - underscore in name, used in other views
	- Default Layout -> configured in _ViewStart.cshtml
	- _Viewimports.cshtml -> imports, taghelpers -> available in all views
- Controller: process/fetch data, handles user request
- Routing: url/controller/action/id

- Models can change name unlike View/Controller
- Data annotation
	- Category_Key
- Adding Nuget packages
	- Versions must match
- Entity framework core configuration
	- Dbcontext class -> connection string
	- Set services in Program.cs
		- pass connection string to AddDbContext
	- Package manager
		- run command update-database
			- not mentioned in video: need to install Microsoft.EntityFrameworkCore.Tools package
		- add migration??
	- Add-migration to add table to db
		- DBSet
		- Category.cs -> ApplicationDBContext.cs
		- MIgrations folder -> generated class
	- Run update-database again
		- Checks for any migration that have not been applied
			- Migrations table in DB
		- Converts code to SQL code
- To create table
	- Create model -> table prop/columns
	- AplicationDbCOntext -> DBSet
	- Package manager -> add-migration -> update-database (to push migration)

- Controller
	- Must have "Controller" keyword at the end
	- Add Controller to layout
- Add rows to table
	- ApplicationDbContext -> overide default OnModelCreating method
	- add-migration
-View
	- Show data from db in view
		- pass returned list to View
		- fetch list in view
			- @model and @use to assign model to view

	-Create new page (add category)
		- New action method
		- Create view (name must match action method name)
		- asp-for tah helper -> define tags for properties in model -> used for labels/input fields
		- Data annotation for model properties
		- Action medthod (httppost) -> to receive post request from view
			- add changes & save changed to db
		- redirect back to another view
		- Serverside validation -> data annotation in model
		- ModelState.IsValid to check before pushing changes to db
		- Use helper-tags in View to display error message during model validation
		- Custom error message with data annotation in Model
		- Add custom model validation logic in Controller -> with custom error message
		- Model validation summary on top of form -> All vs ModelOnly (does not display errors related to model prop)
		- Client side validation 
			- Adding partial view script to view 
		- pre-poppulate filds: passing values to controller when clicking on links -> asp route id

		- Temp data: only lives for 1 request -> cleared on refresh